function [MATPOWERfile_reducedNOGRID,MATPOWERfile_reduced_withGRID,listOFnodes_added,LISTbranches,busANDindex,branchANDindex,genANDindex] = extractZone(MATPOWERfileORIGINAL,listOFnodes)
% function to create a zone with buses and branches of interest with
% respect to the original file
% Inputs: 
% 1) "MATPOWERfileORIGINAL": Original MATPOWER file
% 2) "listOFnodes": List of buses composing the zone
% Outputs:
% 1)"MATPOWERfile_reducedNOGRID": MATPOWER file composeb by only the buses described by the "listOFnodes"
% inputs, and related branches and generators
% 2) "MATPOWERfile_reduced_withGRID": MATPOWER file composed by the buses (and related branches) described by the "listOFnodes"
% inputs and all the buses that are connected to them, defining the
% interconnection with the entire grid
% 3) "listOFnodes_added": list of the added nodes to the purpose to
% describe the interconnection with the entire grid
% 4) "LISTbranches": list of the branches included in the zone. The first
% and second coloumns described the involved buses, and the third one if
% the branches describe a connection with the entire grid (value 1) or
% among internal buses (value 2)

MATPOWERfile_reducedNOGRID=loadcase('caseGeneric');
MATPOWERfile_reduced_withGRID=loadcase('caseGeneric');
% check if listOFnodes is a coloumn vector
[nr,nc] = size(listOFnodes);
if nr>=1 && nc==1
else
    if nr==1 && nc>=1
        listOFnodes = listOFnodes';
    end
end
[nr,~] = size(listOFnodes);

busANDindex=[]; % num_bus, 2=zone or 1=border, index
branchANDindex =[];% fbus, tbus, 2=zone or 1=border, index
genANDindex = []; % num_gen, index, Pmax, Pmin

[nbus,nbranch,nGen,nbat,ngen] = findSystemDimension(MATPOWERfileORIGINAL);

% copy the buses
for i=1:nr
    [zz,~] = find(listOFnodes(i,1)==MATPOWERfileORIGINAL.bus(:,1));
    MATPOWERfile_reducedNOGRID.bus(i,:) = MATPOWERfileORIGINAL.bus(zz,:);
    MATPOWERfile_reduced_withGRID.bus(i,:) = MATPOWERfileORIGINAL.bus(zz,:);

    busANDindex(i,1) = MATPOWERfileORIGINAL.bus(zz,1);
    busANDindex(i,2) = 2;
    busANDindex(i,3) = zz;
end

% copy the branches
LISTbranches = zeros(nbranch,3);
L1 = ismember(MATPOWERfileORIGINAL.branch(:,1),listOFnodes);
L2 = ismember(MATPOWERfileORIGINAL.branch(:,2),listOFnodes);
L = L1(:,1)+L2(:,1);
count_branch =0;
for i=1:nbranch
    if L(i,1)==1
            LISTbranches(i,1) = MATPOWERfileORIGINAL.branch(i,1);
            LISTbranches(i,2) = MATPOWERfileORIGINAL.branch(i,2);
            LISTbranches(i,3)=1;
            count_branch = count_branch+1;
            branchANDindex(count_branch,1) = MATPOWERfileORIGINAL.branch(i,1);
            branchANDindex(count_branch,2) = MATPOWERfileORIGINAL.branch(i,2);
            branchANDindex(count_branch,3) = 1;
            branchANDindex(count_branch,4) = i;
    else
        if L(i,1)==2
            LISTbranches(i,1) = MATPOWERfileORIGINAL.branch(i,1);
            LISTbranches(i,2) = MATPOWERfileORIGINAL.branch(i,2);
            LISTbranches(i,3)=2;
            count_branch = count_branch+1;
            branchANDindex(count_branch,1) = MATPOWERfileORIGINAL.branch(i,1);
            branchANDindex(count_branch,2) = MATPOWERfileORIGINAL.branch(i,2);
            branchANDindex(count_branch,3) = 2;
            branchANDindex(count_branch,4) = i;
        end
    end
end
[x1,~] = find(LISTbranches(:,3)==1);
[x2,~] = find(LISTbranches(:,3)==2);
[nrx1,~] = size(x1);
[nrx2,~] = size(x2);
nbranch_new = 0;
% nbranch_newG = 1;

for h=1:nrx2
    nbranch_new = nbranch_new + 1;
    MATPOWERfile_reducedNOGRID.branch(nbranch_new,:) = MATPOWERfileORIGINAL.branch(x2(h,1),:);
    MATPOWERfile_reduced_withGRID.branch(nbranch_new,:) = MATPOWERfileORIGINAL.branch(x2(h,1),:);
end
nbranch_newG = nbranch_new;
for h=1:nrx1
    nbranch_newG = nbranch_newG + 1;
    MATPOWERfile_reduced_withGRID.branch(nbranch_newG,:) = MATPOWERfileORIGINAL.branch(x1(h,1),:);
end
    

% add the buses to the list of buses, wrt to the branches
[nr_,~] = size(MATPOWERfile_reduced_withGRID.branch);
listOFnodes_added = [];
list = zeros(2*nr_,1);
for i=1:nr_
    list(i,1) = MATPOWERfile_reduced_withGRID.branch(i,1);
    list(i+nr_,1) = MATPOWERfile_reduced_withGRID.branch(i,2);
end
LLL = ismember(list,listOFnodes);
l_counter =0;
for i=1:2*nr_
    if LLL(i,1)==0
        l_counter = l_counter+1;
        listOFnodes_added(l_counter,1) = list(i,1);
    end
end
% eliminate the repetitions in listOFnodes_added
listOFnodes_added = unique(listOFnodes_added);
[nr_,~] = size(listOFnodes_added);
% [nr,~] = size(listOFnodes);
if nr_>0
for i=1:nr_
    [zz,~] = find(listOFnodes_added(i,1)==MATPOWERfileORIGINAL.bus(:,1));
    MATPOWERfile_reduced_withGRID.bus(i+nr,:) = MATPOWERfileORIGINAL.bus(zz,:);
    MATPOWERfile_reduced_withGRID.bus(i+nr,3) = 0;
    MATPOWERfile_reduced_withGRID.bus(i+nr,4) = 0;
    
    busANDindex(i+nr,1) = MATPOWERfileORIGINAL.bus(zz,1);
    busANDindex(i+nr,2) = 1;
    busANDindex(i+nr,3) = zz;
end
end







% copy the generators
L3 = ismember(MATPOWERfileORIGINAL.gen(:,1),listOFnodes);
ccount_gen=0;
ngen_new = 0;
for i=1:nGen
    if L3(i,1)>0
        ngen_new = ngen_new + 1;
        MATPOWERfile_reducedNOGRID.gen(ngen_new,:) = MATPOWERfileORIGINAL.gen(i,:);
        MATPOWERfile_reduced_withGRID.gen(ngen_new,:) = MATPOWERfileORIGINAL.gen(i,:);
        
        MATPOWERfile_reducedNOGRID.gencost(ngen_new,:) = MATPOWERfileORIGINAL.gencost(i,:);
        MATPOWERfile_reduced_withGRID.gencost(ngen_new,:) = MATPOWERfileORIGINAL.gencost(i,:);
        
        ccount_gen = ccount_gen+1;
        genANDindex(ccount_gen,1) = MATPOWERfileORIGINAL.gen(i,1);
        genANDindex(ccount_gen,2) = i;
    end
end







end
