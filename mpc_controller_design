%% MPC by Yalmip with constraints and non delay terms: two control and two disturbances
%x(k+1) = A*x(k) + Bc*uc(k) + Bb*ub(k) + Dg*w(k) +Dn*h(k)
%x(k+1) = A*x(k) + [Bb Bc]*[ub(k) uc(k)]' + [Dg Dn]*[w(k) h(k)]'

%% 
% parameters of system matrices
n=size(A,2); % Number of columns of A
b=size(Bb,2); % Number of columns of Bb
c=size(Bc,2); % Number of columns of Bc
g=size(Dg,2); % Number of columns of Dg
h=size(Dn,2); % Number of columns of Dn


B=[Bc,Bb]; % Merge two control matrices
D=[Dg,Dn]; % Merge two control matrices

% prediction horizon step 
N = 3;%10;%6


%% Design controller formulation in Yalmip
% Define variables
u = sdpvar(b+c,N,'full');  % input trajectory: u0,...,u_{N-1} (columns of U)
x = sdpvar(n,N+1,'full'); % state trajectory: x0,x1,...,xN (columns of X)
%dk = sdpvar(n+b*tau_b+c*tau_c,N,'full'); % vector of disturbance
dk = sdpvar(g+h,1,'full'); % vector of disturbance

% Cost matrices - these will be parameters later
Q = sdpvar(n);
R = sdpvar(b+c);
%R = sdpvar(p);


% constraints
%umin_c = -[78;66;54;10];
umin_c = [0;0;0;0];
%umin_c = [-1;-1;-1;-1];
umin_b = -10*[1];
%umin_b = [-1];

umin = [umin_c;umin_b];

umax_c = [78;66;54;10];
%umax_c = 100*[1;1;1;1];
%umax_b = [10];
umax_b = 10*[1];
umax = [umax_c;umax_b];

%xmin = [-1500;-1500;-1500;-1500;-1500;-1500;-1500;0;0;0;0;0;0;0;0;0;0]; 
%xmin = [-200;-100;-200;-200;-100;-100;-60;0;0;0;0;0;0;0;0;-300;-10]; 
%xmin = [-200;-200;-200;-200;-200;-200;-200;0;0;0;0;0;0;0;0;0;0]; 
xmin = [-50;-60;-60;-60;-60;-60;-60;0;0;0;0;0;0;0;0;0;0]; 
%xmin = [-60;-60;-60;-60;-60;-60;-60;0;0;0;0;-10;0;0;0;0;0]; 
xmin = [-45;-45;-45;-45;-45;-45;-45;0;0;0;0;-10;0;0;0;0;0]; 

%xmax = [1500;1500;1500;1500;1500;1500;1500;78;66;54;10;10;800;78;66;54;10];
%xmax = [200;200;200;200;200;200;200;10;10;10;10;10;800;78;66;54;10];
xmax = [50;50;50;50;50;50;50;78;66;54;10;10;800;78;66;54;10];
%xmax = [60;60;60;60;60;60;60;78;54;66;10;10;800;78;54;66;10];
xmax = [45;45;45;45;45;45;45;78;66;54;10;10;800;78;66;54;10];


% Initialize objective and constraints of the problem
constraints = [];
objective = 0;


% MPC formulation
for k = 1:N

    objective = objective + x(:,k+1)'*Q*x(:,k+1) + u(:,k)'*R*u(:,k); 
     
    % Feasible region
    constraints = [constraints, x(:,k+1) == A*x(:,k) + B*u(:,k) + D*dk];
    constraints = [constraints, umin <= u(:,k) <= umax];
    constraints = [constraints, xmin <= x(:,k+1) <= xmax];
    
end


% Create controller object (generates code)

parameters = {x(:,1), dk, Q, R,};
parameterNames = {'xinit','dk','Q','R',};
%outputs = u(:,1);
outputs = u;
outputNames = {'controlInput'};

%controller = optimizer(constraints, objective, sdpsettings('solver','quadprog'), parameters, outputs);
%controller = optimizer(constraints, objective, sdpsettings('solver','cplex'), parameters, outputs);
controller = optimizer(constraints, objective, sdpsettings('solver','gurobi'), parameters, outputs);
%controller = optimizer(constraints, objective, sdpsettings('solver','mosek'), parameters, outputs);

