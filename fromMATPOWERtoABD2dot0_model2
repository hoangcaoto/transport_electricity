function [Az,Bcz,Bbz,Dgz,Dnz,x,u,d] = fromMATPOWERtoABD2dot0_model2(MATPOWERfileENTIRE,MATPOWERfileZONE,LISTbranches)%,LISTorder,listNodesAdded
%% Function for defining the matrices of the considered system
% Inputs: 
% 1) MATPOWER file full, sorted
% 2) MATPOWER file reduced
% 3) MATPOWER file original, unsorted
% 4) list for operating the change of coordinates from the old to the new
% 5) "LISTbranches": list of the branches included in the zone. The first
% and second coloumns described the involved buses, and the third one if
% the branches describe a connection with the entire grid (value 1) or
% among internal buses (value 2)

global T cb nbus nbranch nGen nbat ngen
% T = sampling;

% Definition of the ISF matrix for PTDF
ISF=makePTDF(MATPOWERfileENTIRE);

[nbus,nbranch,nGen,nbat,ngen] = findSystemDimension(MATPOWERfileENTIRE);
[nbus_z,nbranch_z,nGen_z,nbat_z,ngen_z] = findSystemDimension(MATPOWERfileZONE);


Az = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z);
Bcz = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,ngen_z);
if nbat_z>0 % if there are batteries then
    Bbz = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,nbat_z);
else   % if there are no batteries then
    Bbz = 0;
end
%Dz = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,nbus_z);
Dgz = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,ngen_z); %Matrix for disturbation of generator
Dnz = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,nbus_z); %Matrix for disturbation of power that is outside and affect the zone
%Dz_outside = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,nbus_z)

x = zeros(nbranch_z+ngen_z+2*nbat_z+ngen_z,5);
u = zeros(ngen_z+nbat_z,5);
d = zeros(nbus_z,5);

%% Matrices' elements definition

% Generate the coefficients for the A matrix wrt Fij(k+1) = Fij(k)
for i=1:nbranch_z
    Az(i,i) = 1;
end

% Generate the coefficients for the A matrix wrt 
% Pg(k+1) = Pg(k)
% Pb(k+1) = Pb(k)
% Eb(k+1) = Eb(k)
if ngen_z+nbat_z>0
for i=1+nbranch_z:nbranch_z+ngen_z+2*nbat_z 
    Az(i,i) = 1;
end

for i=1+nbranch_z+ngen_z+2*nbat_z:nbranch_z+ngen_z+2*nbat_z+ngen_z
    Az(i,i) = 1;
end
end


% % Generate the coefficients for the A matrix wrt Eb(k+1) = T*cb*Pb(k)
if nbat_z>0
for i=nbranch_z+ngen_z+nbat_z+1:nbranch_z+ngen_z+2*nbat_z   % WE MUST CHECK IF i=nbranch_z+ngen_z+nbat_z+1:nbranch_z+ngen_z+2*nbat_z
    Az(i,i-nbat_z) = -T*cb;
end
end


% Generate the coefficients for the Bg matrix wrt Pg(k+1)=+DeltaPg(k+dg)
for i=1+nbranch_z:nbranch_z+ngen_z
   Bcz(i,i-nbranch_z) = 1;
end

for i=1+nbranch_z+ngen_z+2*nbat_z:nbranch_z+ngen_z+2*nbat_z+ngen_z
   Bcz(i,i-nbranch_z-ngen_z-2*nbat_z) = -1;
end

% Generate the coefficients for the Bb matrix wrt Pb(k+1)=Pb(k+1)+DeltaPb(k+db)
for i=1+nbranch_z+ngen_z:nbranch_z+ngen_z+nbat_z
   Bbz(i,i-nbranch_z-ngen_z) = 1;
end


% Generate the coefficients for the Bb matrix wrt Eb(k+1)=+T*DeltaPb(k+db)
if nbat_z>0
for i=1+nbranch_z+ngen_z+nbat_z:nbranch_z+ngen_z+nbat_z+nbat_z %i=1+nbranch_z+ngen_z+nbat_z:nbranch_z+ngen_z+nbat_z+nbat_z
   Bbz(i,i-nbranch_z-ngen_z-nbat_z) = -T*cb;
end
end


% i=1+nbranch_z+ngen_z+2*nbat_z:nbranch_z+ngen_z+2*nbat_z+nbranch_z 
% 
% 
% 
if nbat_z>0 && ngen_z>0 % Case with batteries and generators
    for i=1:nbranch_z % run for all the branches
        fbus=MATPOWERfileZONE.branch(i,1);
        tbus=MATPOWERfileZONE.branch(i,2);
        [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
        [zz1s,~] =  size(zz1);
         for r=1:zz1s
         count_bat = 0;
         count_gen = 0;
             for h=1:nGen_z % run for all the generators and batteries
                 
                 [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.bus(:,1) & MATPOWERfileZONE.gen(h,10)>=0);
                %[zz2,~] = find(MATPOWERfileZONE.gen(h,:) & MATPOWERfileENTIRE.gen(:,:));
                 [zz2s,~] =  size(zz2);
                for w=1:zz2s
                   %if MATPOWERfileENTIRE.gen(zz2(w,1),10)>=0
                   %if  MATPOWERfileZONE.gen(h,10)>=0
                       count_gen = count_gen +1;
                       Bcz(i,count_gen)=-ISF(zz1(r,1),zz2(w,1));
                       Dgz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
                       %count_gen = count_gen +1;
% %                        Dz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
                   %else
                       %if MATPOWERfileENTIRE.gen(zz2(w,1),10)<0
                       %count_bat = count_bat +1;
                       %Bbz(i,count_bat)=ISF(zz1(r,1),zz2(w,1));
                       %count_bat = count_bat +1;
                       %end
                   end
                end
             %end
             
%     for i=1+nbranch_z+ngen_z+2*nbat_z:nbranch_z+ngen_z+2*nbat_z+nbranch_z % run for all the branches
%         fbus=MATPOWERfileZONE.branch(i,1);
%         tbus=MATPOWERfileZONE.branch(i,2);
%         [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
%         [zz1s,~] =  size(zz1);
%          for r=1:zz1s
%          count_bat = 0;
%          count_gen = 0;
%              for h=1:nGen_z % run for all the generators and batteries
%                 [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.gen(:,1) & MATPOWERfileZONE.gen(h,10)>=0);
%                 [zz2s,~] =  size(zz2);
%                 for w=1:zz2s
%                    if MATPOWERfileENTIRE.gen(zz2(w,1),10)>=0
%                        count_gen = count_gen +1;
%                        Bgz(i,count_gen)=-ISF(zz1(r,1),zz2(w,1));
% % %                        Dz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
%                    else
% %                        if MATPOWERfileENTIRE.gen(zz2(w,1),10)<0
% %                        count_bat = count_bat +1;
% %                        Bbz(i,count_bat)=ISF(zz1(r,1),zz2(w,1));
% %                        end
%                    end
%                 end
%              end     
             
             for h=1:nGen_z % run for all the generators and batteries 
                 
                 [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.bus(:,1) & MATPOWERfileZONE.gen(h,10)<0);
                 [zz2s,~] =  size(zz2);
                for w=1:zz2s
%                     
%                     
%                     %if MATPOWERfileENTIRE.gen(zz2(w,1),10)>=0
%                         %count_gen = count_gen +1;
%                         %Bcz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
%                         %Dgz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
%                     %else
%                     if MATPOWERfileENTIRE.gen(zz2(w,1),10)<0
                         count_bat = count_bat +1;
                         Bbz(i,count_bat)=ISF(zz1(r,1),zz2(w,1));
%                     end
%                     %end
                 end
              end
             
             
         end
    end
    
%     for i=1:nbranch_z % run for all the branches
%         fbus=MATPOWERfileZONE.branch(i,1);
%         tbus=MATPOWERfileZONE.branch(i,2);
%         [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
%         [zz1s,~] =  size(zz1);
%          for r=1:zz1s
%          count_bat = 0;
%          count_gen = 0;
%              for h=1:nGen_z % run for all the generators and batteries
%                 [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.gen(:,1) & MATPOWERfileZONE.gen(h,10)>=0);
%                 [zz2s,~] =  size(zz2);
%                 for w=1:zz2s
%                    if MATPOWERfileENTIRE.gen(zz2(w,1),10)>=0
%                        count_gen = count_gen +1;
%                        Bgz(nbranch_z+ngen_z+2*nbat_z+i,count_gen)=-ISF(zz1(r,1),zz2(w,1));
% % %                        Dz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
%                    else
% %                        if MATPOWERfileENTIRE.gen(zz2(w,1),10)<0
% %                        count_bat = count_bat +1;
% %                        Bbz(i,count_bat)=ISF(zz1(r,1),zz2(w,1));
% %                        end
%                    end
%                 end
%              end
%     end               
    
%     else 
%             if nbat_z==0 && ngen_z>0  % Case with only generators
%                for i=1:nbranch_z % run for all the branches
%                    fbus=MATPOWERfileZONE.branch(i,1);
%                    tbus=MATPOWERfileZONE.branch(i,2);
%                    [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
%                    [zz1s,~] =  size(zz1);
%                    for r=1:zz1s
%                        count_gen = 0;
%                        for h=1:nGen_z % run for all the generators and batteries
%                            [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.gen(:,1));
%                            [zz2s,~] =  size(zz2);
%                            for w=1:zz2s
%                               count_gen = count_gen +1;
%                               Bgz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
% %                               Dz(i,count_gen)=ISF(zz1(r,1),zz2(w,1));
%                            end
%                        end
%                    end
%             end
%                 
%                 else
%                 if ngen_z==0 && nbat_z>0 % Case with only batteries
%                         for i=1:nbranch_z % run for all the branches
%                             fbus=MATPOWERfileZONE.branch(i,1);
%                             tbus=MATPOWERfileZONE.branch(i,2);
%                             [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
%                             [zz1s,~] =  size(zz1);
%                             for r=1:zz1s
%                                 count_bat = 0;
%                                 for h=1:nGen_z % run for all the generators and batteries
%                                     [zz2,~] = find(MATPOWERfileZONE.gen(h,1)== MATPOWERfileENTIRE.gen(:,1));
%                                     [zz2s,~] =  size(zz2);
%                                     for w=1:zz2s
%                                         count_bat = count_bat +1
%                                         Bbz(i,count_bat)=ISF(zz1(r,1),zz2(w,1))
%                                     end
%                                 end
%                             end
%                         end
%                 end
%     end
%                 
%             
end





for i=1+nbranch_z+ngen_z+2*nbat_z:nbranch_z+ngen_z+2*nbat_z+ngen_z
   Dgz(i,i-nbranch_z-ngen_z-2*nbat_z) = 1;
end



% for k=1:nbranch_z % run for all the branches
%     fbus=MATPOWERfileZONE.branch(k,1);
%     tbus=MATPOWERfileZONE.branch(k,2);
%     [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
%     [zz1s,~] =  size(zz1);
%     
%     for r=1:zz1s
%     
%         for i=1:ngen_z % for all nodes
%                 [zz2,~] = find(MATPOWERfileZONE.bus(i,1)== MATPOWERfileENTIRE.bus(:,1));
%                 Dgz(k,i) = ISF(zz1(r,1),zz2);
%         end
%     end
% end
                
%PTDF matrix for disturbance
for k=1:nbranch_z % run for all the branches
    fbus=MATPOWERfileZONE.branch(k,1);
    tbus=MATPOWERfileZONE.branch(k,2);
    [zz1,~] = find(LISTbranches(:,1)==fbus & LISTbranches(:,2)==tbus);
    [zz1s,~] =  size(zz1);
    
    for r=1:zz1s
    
        for i=1:nbus_z % for all nodes
                [zz2,~] = find(MATPOWERfileZONE.bus(i,1)== MATPOWERfileENTIRE.bus(:,1));
                Dnz(k,i) = ISF(zz1(r,1),zz2);
        end
    end
end





